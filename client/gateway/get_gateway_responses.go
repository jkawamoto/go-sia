// Code generated by go-swagger; DO NOT EDIT.

package gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jkawamoto/go-sia/models"
)

// GetGatewayReader is a Reader for the GetGateway structure.
type GetGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetGatewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetGatewayDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetGatewayOK creates a GetGatewayOK with default headers values
func NewGetGatewayOK() *GetGatewayOK {
	return &GetGatewayOK{}
}

/*GetGatewayOK handles this case with default header values.

Successful Response
*/
type GetGatewayOK struct {
	Payload *GetGatewayOKBody
}

func (o *GetGatewayOK) Error() string {
	return fmt.Sprintf("[GET /gateway][%d] getGatewayOK  %+v", 200, o.Payload)
}

func (o *GetGatewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGatewayOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayDefault creates a GetGatewayDefault with default headers values
func NewGetGatewayDefault(code int) *GetGatewayDefault {
	return &GetGatewayDefault{
		_statusCode: code,
	}
}

/*GetGatewayDefault handles this case with default header values.

Error Response
*/
type GetGatewayDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get gateway default response
func (o *GetGatewayDefault) Code() int {
	return o._statusCode
}

func (o *GetGatewayDefault) Error() string {
	return fmt.Sprintf("[GET /gateway][%d] GetGateway default  %+v", o._statusCode, o.Payload)
}

func (o *GetGatewayDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetGatewayOKBody get gateway o k body
swagger:model GetGatewayOKBody
*/
type GetGatewayOKBody struct {

	// netaddress is the network address of the gateway as seen by the rest of
	// the network. The address consists of the external IP address and the
	// port Sia is listening on. It represents a `modules.NetAddress`.
	//
	Netaddress string `json:"netaddress,omitempty"`

	// peers is an array of peers the gateway is connected to. It represents an array of `modules.Peer`s.
	Peers []*PeersItems0 `json:"peers"`
}

// Validate validates this get gateway o k body
func (o *GetGatewayOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGatewayOKBody) validatePeers(formats strfmt.Registry) error {

	if swag.IsZero(o.Peers) { // not required
		return nil
	}

	for i := 0; i < len(o.Peers); i++ {
		if swag.IsZero(o.Peers[i]) { // not required
			continue
		}

		if o.Peers[i] != nil {
			if err := o.Peers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getGatewayOK" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGatewayOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGatewayOKBody) UnmarshalBinary(b []byte) error {
	var res GetGatewayOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PeersItems0 peers items0
swagger:model PeersItems0
*/
type PeersItems0 struct {

	// inbound is true when the peer initiated the connection. This field
	// is exposed as outbound peers are generally trusted more than inbound
	// peers, as inbound peers are easily manipulated by an adversary.
	//
	Inbound bool `json:"inbound,omitempty"`

	// netaddress is the address of the peer. It represents a `modules.NetAddress`.
	Netaddress string `json:"netaddress,omitempty"`

	// version is the version number of the peer.
	Version string `json:"version,omitempty"`
}

// Validate validates this peers items0
func (o *PeersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PeersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PeersItems0) UnmarshalBinary(b []byte) error {
	var res PeersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
