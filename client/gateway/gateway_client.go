// Code generated by go-swagger; DO NOT EDIT.

package gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new gateway API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gateway API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetGateway returns information about the gateway, including the list of connected peers.
*/
func (a *Client) GetGateway(params *GetGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*GetGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGateway",
		Method:             "GET",
		PathPattern:        "/gateway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGatewayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostGatewayConnectNetaddress connects the gateway to a peer. The peer is added to the node list if it is not already present. The node list is the list of all nodes the gateway knows about, but is not necessarily connected to.
*/
func (a *Client) PostGatewayConnectNetaddress(params *PostGatewayConnectNetaddressParams, authInfo runtime.ClientAuthInfoWriter) (*PostGatewayConnectNetaddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGatewayConnectNetaddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGatewayConnectNetaddress",
		Method:             "POST",
		PathPattern:        "/gateway/connect/{netaddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGatewayConnectNetaddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGatewayConnectNetaddressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGatewayConnectNetaddressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostGatewayDisconnectNetaddress disconnects the gateway from a peer. The peer remains in the node list. Disconnecting from a peer does not prevent the gateway from automatically connecting to the peer in the future.
*/
func (a *Client) PostGatewayDisconnectNetaddress(params *PostGatewayDisconnectNetaddressParams, authInfo runtime.ClientAuthInfoWriter) (*PostGatewayDisconnectNetaddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGatewayDisconnectNetaddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGatewayDisconnectNetaddress",
		Method:             "POST",
		PathPattern:        "/gateway/disconnect/{netaddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGatewayDisconnectNetaddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGatewayDisconnectNetaddressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGatewayDisconnectNetaddressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
