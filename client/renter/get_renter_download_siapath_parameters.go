// Code generated by go-swagger; DO NOT EDIT.

package renter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRenterDownloadSiapathParams creates a new GetRenterDownloadSiapathParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRenterDownloadSiapathParams() *GetRenterDownloadSiapathParams {
	return &GetRenterDownloadSiapathParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRenterDownloadSiapathParamsWithTimeout creates a new GetRenterDownloadSiapathParams object
// with the ability to set a timeout on a request.
func NewGetRenterDownloadSiapathParamsWithTimeout(timeout time.Duration) *GetRenterDownloadSiapathParams {
	return &GetRenterDownloadSiapathParams{
		timeout: timeout,
	}
}

// NewGetRenterDownloadSiapathParamsWithContext creates a new GetRenterDownloadSiapathParams object
// with the ability to set a context for a request.
func NewGetRenterDownloadSiapathParamsWithContext(ctx context.Context) *GetRenterDownloadSiapathParams {
	return &GetRenterDownloadSiapathParams{
		Context: ctx,
	}
}

// NewGetRenterDownloadSiapathParamsWithHTTPClient creates a new GetRenterDownloadSiapathParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRenterDownloadSiapathParamsWithHTTPClient(client *http.Client) *GetRenterDownloadSiapathParams {
	return &GetRenterDownloadSiapathParams{
		HTTPClient: client,
	}
}

/* GetRenterDownloadSiapathParams contains all the parameters to send to the API endpoint
   for the get renter download siapath operation.

   Typically these are written to a http.Request.
*/
type GetRenterDownloadSiapathParams struct {

	/* Async.

	   If async is true, the http request will be non blocking. Can't be used with
	*/
	Async *bool

	/* Destination.

	   Location on disk that the file will be downloaded to.
	*/
	Destination string

	/* Httpresp.

	   If httresp is true, the data will be written to the http response.
	*/
	Httpresp *bool

	/* Length.

	   Length of the requested data. Has to be <= filesize-offset.

	   Format: int64
	*/
	Length *int64

	/* Offset.

	   Offset relative to the file start from where the download starts.

	   Format: int64
	*/
	Offset *int64

	/* Siapath.

	   Location of the file in the renter on the network.
	*/
	Siapath string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get renter download siapath params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRenterDownloadSiapathParams) WithDefaults() *GetRenterDownloadSiapathParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get renter download siapath params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRenterDownloadSiapathParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithTimeout(timeout time.Duration) *GetRenterDownloadSiapathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithContext(ctx context.Context) *GetRenterDownloadSiapathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithHTTPClient(client *http.Client) *GetRenterDownloadSiapathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsync adds the async to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithAsync(async *bool) *GetRenterDownloadSiapathParams {
	o.SetAsync(async)
	return o
}

// SetAsync adds the async to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetAsync(async *bool) {
	o.Async = async
}

// WithDestination adds the destination to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithDestination(destination string) *GetRenterDownloadSiapathParams {
	o.SetDestination(destination)
	return o
}

// SetDestination adds the destination to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetDestination(destination string) {
	o.Destination = destination
}

// WithHttpresp adds the httpresp to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithHttpresp(httpresp *bool) *GetRenterDownloadSiapathParams {
	o.SetHttpresp(httpresp)
	return o
}

// SetHttpresp adds the httpresp to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetHttpresp(httpresp *bool) {
	o.Httpresp = httpresp
}

// WithLength adds the length to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithLength(length *int64) *GetRenterDownloadSiapathParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetLength(length *int64) {
	o.Length = length
}

// WithOffset adds the offset to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithOffset(offset *int64) *GetRenterDownloadSiapathParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSiapath adds the siapath to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) WithSiapath(siapath string) *GetRenterDownloadSiapathParams {
	o.SetSiapath(siapath)
	return o
}

// SetSiapath adds the siapath to the get renter download siapath params
func (o *GetRenterDownloadSiapathParams) SetSiapath(siapath string) {
	o.Siapath = siapath
}

// WriteToRequest writes these params to a swagger request
func (o *GetRenterDownloadSiapathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Async != nil {

		// query param async
		var qrAsync bool

		if o.Async != nil {
			qrAsync = *o.Async
		}
		qAsync := swag.FormatBool(qrAsync)
		if qAsync != "" {

			if err := r.SetQueryParam("async", qAsync); err != nil {
				return err
			}
		}
	}

	// query param destination
	qrDestination := o.Destination
	qDestination := qrDestination
	if qDestination != "" {

		if err := r.SetQueryParam("destination", qDestination); err != nil {
			return err
		}
	}

	if o.Httpresp != nil {

		// query param httpresp
		var qrHttpresp bool

		if o.Httpresp != nil {
			qrHttpresp = *o.Httpresp
		}
		qHttpresp := swag.FormatBool(qrHttpresp)
		if qHttpresp != "" {

			if err := r.SetQueryParam("httpresp", qHttpresp); err != nil {
				return err
			}
		}
	}

	if o.Length != nil {

		// query param length
		var qrLength int64

		if o.Length != nil {
			qrLength = *o.Length
		}
		qLength := swag.FormatInt64(qrLength)
		if qLength != "" {

			if err := r.SetQueryParam("length", qLength); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// path param siapath
	if err := r.SetPathParam("siapath", o.Siapath); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
