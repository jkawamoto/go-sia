// Code generated by go-swagger; DO NOT EDIT.

package renter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new renter API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for renter API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetRenter(params *GetRenterParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterOK, error)

	GetRenterBackup(params *GetRenterBackupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterBackupOK, error)

	GetRenterContracts(params *GetRenterContractsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterContractsOK, error)

	GetRenterDirSiapath(params *GetRenterDirSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDirSiapathOK, error)

	GetRenterDownloadSiapath(params *GetRenterDownloadSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadSiapathNoContent, error)

	GetRenterDownloadasyncSiapath(params *GetRenterDownloadasyncSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadasyncSiapathNoContent, error)

	GetRenterDownloads(params *GetRenterDownloadsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadsOK, error)

	GetRenterFileSiapath(params *GetRenterFileSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterFileSiapathOK, error)

	GetRenterFiles(params *GetRenterFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterFilesOK, error)

	GetRenterPrices(params *GetRenterPricesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterPricesOK, error)

	GetRenterStreamSiapath(params *GetRenterStreamSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterStreamSiapathOK, error)

	PostRenter(params *PostRenterParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterNoContent, error)

	PostRenterBackupsCreate(params *PostRenterBackupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterBackupsCreateNoContent, error)

	PostRenterBackupsRestore(params *PostRenterBackupsRestoreParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterBackupsRestoreNoContent, error)

	PostRenterDeleteSiapath(params *PostRenterDeleteSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDeleteSiapathNoContent, error)

	PostRenterDirSiapath(params *PostRenterDirSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDirSiapathNoContent, error)

	PostRenterDownloadsClear(params *PostRenterDownloadsClearParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDownloadsClearNoContent, error)

	PostRenterRenameSiapath(params *PostRenterRenameSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterRenameSiapathNoContent, error)

	PostRenterUploadSiapath(params *PostRenterUploadSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterUploadSiapathNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetRenter returns the current settings along with metrics on the renter's spending.
*/
func (a *Client) GetRenter(params *GetRenterParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenter",
		Method:             "GET",
		PathPattern:        "/renter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterBackup Lists backups.
*/
func (a *Client) GetRenterBackup(params *GetRenterBackupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterBackup",
		Method:             "GET",
		PathPattern:        "/renter/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterContracts returns active contracts. Expired contracts are not included.
*/
func (a *Client) GetRenterContracts(params *GetRenterContractsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterContractsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterContractsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterContracts",
		Method:             "GET",
		PathPattern:        "/renter/contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterContractsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterContractsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterContractsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterDirSiapath retrieves the contents of a directory on the sia network
*/
func (a *Client) GetRenterDirSiapath(params *GetRenterDirSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDirSiapathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDirSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDirSiapath",
		Method:             "GET",
		PathPattern:        "/renter/dir/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDirSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterDirSiapathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterDirSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterDownloadSiapath downloads a file to the local filesystem. The call will block until the file has been downloaded.
*/
func (a *Client) GetRenterDownloadSiapath(params *GetRenterDownloadSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDownloadSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDownloadSiapath",
		Method:             "GET",
		PathPattern:        "/renter/download/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDownloadSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterDownloadSiapathNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterDownloadSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterDownloadasyncSiapath downloads a file to the local filesystem. The call will return immediately.
*/
func (a *Client) GetRenterDownloadasyncSiapath(params *GetRenterDownloadasyncSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadasyncSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDownloadasyncSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDownloadasyncSiapath",
		Method:             "GET",
		PathPattern:        "/renter/downloadasync/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDownloadasyncSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterDownloadasyncSiapathNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterDownloadasyncSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterDownloads lists all files in the download queue.
*/
func (a *Client) GetRenterDownloads(params *GetRenterDownloadsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDownloadsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDownloads",
		Method:             "GET",
		PathPattern:        "/renter/downloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDownloadsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterDownloadsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterDownloadsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterFileSiapath lists the status of specified file.
*/
func (a *Client) GetRenterFileSiapath(params *GetRenterFileSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterFileSiapathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterFileSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterFileSiapath",
		Method:             "GET",
		PathPattern:        "/renter/file/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterFileSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterFileSiapathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterFileSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterFiles lists the status of all files.
*/
func (a *Client) GetRenterFiles(params *GetRenterFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterFiles",
		Method:             "GET",
		PathPattern:        "/renter/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterPrices lists the estimated prices of performing various storage and data operations.
*/
func (a *Client) GetRenterPrices(params *GetRenterPricesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterPricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterPrices",
		Method:             "GET",
		PathPattern:        "/renter/prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterPricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterPricesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterPricesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRenterStreamSiapath downloads a file using http streaming. This call blocks until the data is received. The streaming endpoint also uses caching internally to prevent siad from redownloading the same chunk multiple times when only parts of a file are requested at once. This might lead to a substantial increase in ram usage and therefore it is not recommended to stream multiple files in parallel at the moment. This restriction will be removed together with the caching once partial downloads are supported in the future.
*/
func (a *Client) GetRenterStreamSiapath(params *GetRenterStreamSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterStreamSiapathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterStreamSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterStreamSiapath",
		Method:             "GET",
		PathPattern:        "/renter/stream/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterStreamSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRenterStreamSiapathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRenterStreamSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenter modify settings that control the renter's behavior.
*/
func (a *Client) PostRenter(params *PostRenterParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenter",
		Method:             "POST",
		PathPattern:        "/renter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterBackupsCreate Creates a backup of all siafiles.
*/
func (a *Client) PostRenterBackupsCreate(params *PostRenterBackupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterBackupsCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterBackupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterBackupsCreate",
		Method:             "POST",
		PathPattern:        "/renter/backups/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterBackupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterBackupsCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterBackupsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterBackupsRestore Restores siafiles from a backup.
*/
func (a *Client) PostRenterBackupsRestore(params *PostRenterBackupsRestoreParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterBackupsRestoreNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterBackupsRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterBackupsRestore",
		Method:             "POST",
		PathPattern:        "/renter/backups/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterBackupsRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterBackupsRestoreNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterBackupsRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterDeleteSiapath deletes a renter file entry. Does not delete any downloads or original files, only the entry in the renter.
*/
func (a *Client) PostRenterDeleteSiapath(params *PostRenterDeleteSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDeleteSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterDeleteSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterDeleteSiapath",
		Method:             "POST",
		PathPattern:        "/renter/delete/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterDeleteSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterDeleteSiapathNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterDeleteSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterDirSiapath performs various functions on the renter's directories
*/
func (a *Client) PostRenterDirSiapath(params *PostRenterDirSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDirSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterDirSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterDirSiapath",
		Method:             "POST",
		PathPattern:        "/renter/dir/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterDirSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterDirSiapathNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterDirSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterDownloadsClear Clears the download history of the renter for a range of unix time stamps. Both parameters are optional, if no parameters are provided, the entire download history will be cleared. To clear a single download, provide the timestamp for the download as both parameters. Providing only the before parameter will clear all downloads older than the timestamp. Conversely, providing only the after parameter will clear all downloads newer than the timestamp.
*/
func (a *Client) PostRenterDownloadsClear(params *PostRenterDownloadsClearParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDownloadsClearNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterDownloadsClearParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterDownloadsClear",
		Method:             "POST",
		PathPattern:        "/renter/downloads/clear",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterDownloadsClearReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterDownloadsClearNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterDownloadsClearDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterRenameSiapath renames a file. Does not rename any downloads or source files, only renames the entry in the renter. An error is returned if siapath does not exist or newsiapath already exists.
*/
func (a *Client) PostRenterRenameSiapath(params *PostRenterRenameSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterRenameSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterRenameSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterRenameSiapath",
		Method:             "POST",
		PathPattern:        "/renter/rename/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterRenameSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterRenameSiapathNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterRenameSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostRenterUploadSiapath uploads a file to the network from the local filesystem.
*/
func (a *Client) PostRenterUploadSiapath(params *PostRenterUploadSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterUploadSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterUploadSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterUploadSiapath",
		Method:             "POST",
		PathPattern:        "/renter/upload/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterUploadSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRenterUploadSiapathNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostRenterUploadSiapathDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
