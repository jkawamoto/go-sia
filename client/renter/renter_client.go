// Code generated by go-swagger; DO NOT EDIT.

package renter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new renter API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for renter API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetRenter returns the current settings along with metrics on the renter's spending.
*/
func (a *Client) GetRenter(params *GetRenterParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenter",
		Method:             "GET",
		PathPattern:        "/renter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterOK), nil

}

/*
GetRenterContracts returns active contracts. Expired contracts are not included.
*/
func (a *Client) GetRenterContracts(params *GetRenterContractsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterContractsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterContractsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterContracts",
		Method:             "GET",
		PathPattern:        "/renter/contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterContractsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterContractsOK), nil

}

/*
GetRenterDownloadSiapath downloads a file to the local filesystem. The call will block until the file has been downloaded.
*/
func (a *Client) GetRenterDownloadSiapath(params *GetRenterDownloadSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDownloadSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDownloadSiapath",
		Method:             "GET",
		PathPattern:        "/renter/download/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDownloadSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterDownloadSiapathNoContent), nil

}

/*
GetRenterDownloadasyncSiapath downloads a file to the local filesystem. The call will return immediately.
*/
func (a *Client) GetRenterDownloadasyncSiapath(params *GetRenterDownloadasyncSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadasyncSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDownloadasyncSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDownloadasyncSiapath",
		Method:             "GET",
		PathPattern:        "/renter/downloadasync/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDownloadasyncSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterDownloadasyncSiapathNoContent), nil

}

/*
GetRenterDownloads lists all files in the download queue.
*/
func (a *Client) GetRenterDownloads(params *GetRenterDownloadsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterDownloadsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterDownloadsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterDownloads",
		Method:             "GET",
		PathPattern:        "/renter/downloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterDownloadsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterDownloadsOK), nil

}

/*
GetRenterFileSiapath lists the status of specified file.
*/
func (a *Client) GetRenterFileSiapath(params *GetRenterFileSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterFileSiapathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterFileSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterFileSiapath",
		Method:             "GET",
		PathPattern:        "/renter/file/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterFileSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterFileSiapathOK), nil

}

/*
GetRenterFiles lists the status of all files.
*/
func (a *Client) GetRenterFiles(params *GetRenterFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterFiles",
		Method:             "GET",
		PathPattern:        "/renter/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterFilesOK), nil

}

/*
GetRenterPrices lists the estimated prices of performing various storage and data operations.
*/
func (a *Client) GetRenterPrices(params *GetRenterPricesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterPricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterPrices",
		Method:             "GET",
		PathPattern:        "/renter/prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterPricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterPricesOK), nil

}

/*
GetRenterStreamSiapath downloads a file using http streaming. This call blocks until the data is received. The streaming endpoint also uses caching internally to prevent siad from redownloading the same chunk multiple times when only parts of a file are requested at once. This might lead to a substantial increase in ram usage and therefore it is not recommended to stream multiple files in parallel at the moment. This restriction will be removed together with the caching once partial downloads are supported in the future.
*/
func (a *Client) GetRenterStreamSiapath(params *GetRenterStreamSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*GetRenterStreamSiapathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRenterStreamSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRenterStreamSiapath",
		Method:             "GET",
		PathPattern:        "/renter/stream/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRenterStreamSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRenterStreamSiapathOK), nil

}

/*
PostRenter modify settings that control the renter's behavior.
*/
func (a *Client) PostRenter(params *PostRenterParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenter",
		Method:             "POST",
		PathPattern:        "/renter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRenterNoContent), nil

}

/*
PostRenterDeleteSiapath deletes a renter file entry. Does not delete any downloads or original files, only the entry in the renter.
*/
func (a *Client) PostRenterDeleteSiapath(params *PostRenterDeleteSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterDeleteSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterDeleteSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterDeleteSiapath",
		Method:             "POST",
		PathPattern:        "/renter/delete/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterDeleteSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRenterDeleteSiapathNoContent), nil

}

/*
PostRenterRenameSiapath renames a file. Does not rename any downloads or source files, only renames the entry in the renter. An error is returned if siapath does not exist or newsiapath already exists.
*/
func (a *Client) PostRenterRenameSiapath(params *PostRenterRenameSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterRenameSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterRenameSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterRenameSiapath",
		Method:             "POST",
		PathPattern:        "/renter/rename/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterRenameSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRenterRenameSiapathNoContent), nil

}

/*
PostRenterUploadSiapath uploads a file to the network from the local filesystem.
*/
func (a *Client) PostRenterUploadSiapath(params *PostRenterUploadSiapathParams, authInfo runtime.ClientAuthInfoWriter) (*PostRenterUploadSiapathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRenterUploadSiapathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRenterUploadSiapath",
		Method:             "POST",
		PathPattern:        "/renter/upload/{siapath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRenterUploadSiapathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRenterUploadSiapathNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
