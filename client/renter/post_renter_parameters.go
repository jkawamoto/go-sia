// Code generated by go-swagger; DO NOT EDIT.

package renter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostRenterParams creates a new PostRenterParams object
// with the default values initialized.
func NewPostRenterParams() *PostRenterParams {
	var ()
	return &PostRenterParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostRenterParamsWithTimeout creates a new PostRenterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostRenterParamsWithTimeout(timeout time.Duration) *PostRenterParams {
	var ()
	return &PostRenterParams{

		timeout: timeout,
	}
}

// NewPostRenterParamsWithContext creates a new PostRenterParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostRenterParamsWithContext(ctx context.Context) *PostRenterParams {
	var ()
	return &PostRenterParams{

		Context: ctx,
	}
}

// NewPostRenterParamsWithHTTPClient creates a new PostRenterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostRenterParamsWithHTTPClient(client *http.Client) *PostRenterParams {
	var ()
	return &PostRenterParams{
		HTTPClient: client,
	}
}

/*PostRenterParams contains all the parameters to send to the API endpoint
for the post renter operation typically these are written to a http.Request
*/
type PostRenterParams struct {

	/*Funds
	  Number of hastings allocated for file contracts in the given period.

	*/
	Funds *string
	/*Hosts
	  Number of hosts that contracts should be formed with. Files cannot be uploaded to more hosts than you have contracts with, and it's generally good to form a few more contracts than you need.

	*/
	Hosts *int64
	/*Maxdownloadspeed
	  Max download speed permitted, speed provide in bytes per second.

	*/
	Maxdownloadspeed *int64
	/*Maxuploadspeed
	  Max upload speed permitted, speed provide in bytes per second

	*/
	Maxuploadspeed *int64
	/*Period
	  Duration of contracts formed. Must be nonzero.

	*/
	Period *int64
	/*Renewwindow
	  Renew window specifies how many blocks before the expiration of the current contracts the renter will wait before renewing the contracts. A smaller renew window means that Sia must be run more frequently, but also means fewer total transaction fees. Storage spending is not affected by the renew window size.

	*/
	Renewwindow *int64
	/*Streamcachesize
	  Stream cache size specifies how many data chunks will be cached while streaming.

	*/
	Streamcachesize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post renter params
func (o *PostRenterParams) WithTimeout(timeout time.Duration) *PostRenterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post renter params
func (o *PostRenterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post renter params
func (o *PostRenterParams) WithContext(ctx context.Context) *PostRenterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post renter params
func (o *PostRenterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post renter params
func (o *PostRenterParams) WithHTTPClient(client *http.Client) *PostRenterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post renter params
func (o *PostRenterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFunds adds the funds to the post renter params
func (o *PostRenterParams) WithFunds(funds *string) *PostRenterParams {
	o.SetFunds(funds)
	return o
}

// SetFunds adds the funds to the post renter params
func (o *PostRenterParams) SetFunds(funds *string) {
	o.Funds = funds
}

// WithHosts adds the hosts to the post renter params
func (o *PostRenterParams) WithHosts(hosts *int64) *PostRenterParams {
	o.SetHosts(hosts)
	return o
}

// SetHosts adds the hosts to the post renter params
func (o *PostRenterParams) SetHosts(hosts *int64) {
	o.Hosts = hosts
}

// WithMaxdownloadspeed adds the maxdownloadspeed to the post renter params
func (o *PostRenterParams) WithMaxdownloadspeed(maxdownloadspeed *int64) *PostRenterParams {
	o.SetMaxdownloadspeed(maxdownloadspeed)
	return o
}

// SetMaxdownloadspeed adds the maxdownloadspeed to the post renter params
func (o *PostRenterParams) SetMaxdownloadspeed(maxdownloadspeed *int64) {
	o.Maxdownloadspeed = maxdownloadspeed
}

// WithMaxuploadspeed adds the maxuploadspeed to the post renter params
func (o *PostRenterParams) WithMaxuploadspeed(maxuploadspeed *int64) *PostRenterParams {
	o.SetMaxuploadspeed(maxuploadspeed)
	return o
}

// SetMaxuploadspeed adds the maxuploadspeed to the post renter params
func (o *PostRenterParams) SetMaxuploadspeed(maxuploadspeed *int64) {
	o.Maxuploadspeed = maxuploadspeed
}

// WithPeriod adds the period to the post renter params
func (o *PostRenterParams) WithPeriod(period *int64) *PostRenterParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the post renter params
func (o *PostRenterParams) SetPeriod(period *int64) {
	o.Period = period
}

// WithRenewwindow adds the renewwindow to the post renter params
func (o *PostRenterParams) WithRenewwindow(renewwindow *int64) *PostRenterParams {
	o.SetRenewwindow(renewwindow)
	return o
}

// SetRenewwindow adds the renewwindow to the post renter params
func (o *PostRenterParams) SetRenewwindow(renewwindow *int64) {
	o.Renewwindow = renewwindow
}

// WithStreamcachesize adds the streamcachesize to the post renter params
func (o *PostRenterParams) WithStreamcachesize(streamcachesize *int64) *PostRenterParams {
	o.SetStreamcachesize(streamcachesize)
	return o
}

// SetStreamcachesize adds the streamcachesize to the post renter params
func (o *PostRenterParams) SetStreamcachesize(streamcachesize *int64) {
	o.Streamcachesize = streamcachesize
}

// WriteToRequest writes these params to a swagger request
func (o *PostRenterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Funds != nil {

		// query param funds
		var qrFunds string
		if o.Funds != nil {
			qrFunds = *o.Funds
		}
		qFunds := qrFunds
		if qFunds != "" {
			if err := r.SetQueryParam("funds", qFunds); err != nil {
				return err
			}
		}

	}

	if o.Hosts != nil {

		// query param hosts
		var qrHosts int64
		if o.Hosts != nil {
			qrHosts = *o.Hosts
		}
		qHosts := swag.FormatInt64(qrHosts)
		if qHosts != "" {
			if err := r.SetQueryParam("hosts", qHosts); err != nil {
				return err
			}
		}

	}

	if o.Maxdownloadspeed != nil {

		// query param maxdownloadspeed
		var qrMaxdownloadspeed int64
		if o.Maxdownloadspeed != nil {
			qrMaxdownloadspeed = *o.Maxdownloadspeed
		}
		qMaxdownloadspeed := swag.FormatInt64(qrMaxdownloadspeed)
		if qMaxdownloadspeed != "" {
			if err := r.SetQueryParam("maxdownloadspeed", qMaxdownloadspeed); err != nil {
				return err
			}
		}

	}

	if o.Maxuploadspeed != nil {

		// query param maxuploadspeed
		var qrMaxuploadspeed int64
		if o.Maxuploadspeed != nil {
			qrMaxuploadspeed = *o.Maxuploadspeed
		}
		qMaxuploadspeed := swag.FormatInt64(qrMaxuploadspeed)
		if qMaxuploadspeed != "" {
			if err := r.SetQueryParam("maxuploadspeed", qMaxuploadspeed); err != nil {
				return err
			}
		}

	}

	if o.Period != nil {

		// query param period
		var qrPeriod int64
		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := swag.FormatInt64(qrPeriod)
		if qPeriod != "" {
			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}

	}

	if o.Renewwindow != nil {

		// query param renewwindow
		var qrRenewwindow int64
		if o.Renewwindow != nil {
			qrRenewwindow = *o.Renewwindow
		}
		qRenewwindow := swag.FormatInt64(qrRenewwindow)
		if qRenewwindow != "" {
			if err := r.SetQueryParam("renewwindow", qRenewwindow); err != nil {
				return err
			}
		}

	}

	if o.Streamcachesize != nil {

		// query param streamcachesize
		var qrStreamcachesize int64
		if o.Streamcachesize != nil {
			qrStreamcachesize = *o.Streamcachesize
		}
		qStreamcachesize := swag.FormatInt64(qrStreamcachesize)
		if qStreamcachesize != "" {
			if err := r.SetQueryParam("streamcachesize", qStreamcachesize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
