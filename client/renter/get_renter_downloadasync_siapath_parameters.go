// Code generated by go-swagger; DO NOT EDIT.

package renter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRenterDownloadasyncSiapathParams creates a new GetRenterDownloadasyncSiapathParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRenterDownloadasyncSiapathParams() *GetRenterDownloadasyncSiapathParams {
	return &GetRenterDownloadasyncSiapathParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRenterDownloadasyncSiapathParamsWithTimeout creates a new GetRenterDownloadasyncSiapathParams object
// with the ability to set a timeout on a request.
func NewGetRenterDownloadasyncSiapathParamsWithTimeout(timeout time.Duration) *GetRenterDownloadasyncSiapathParams {
	return &GetRenterDownloadasyncSiapathParams{
		timeout: timeout,
	}
}

// NewGetRenterDownloadasyncSiapathParamsWithContext creates a new GetRenterDownloadasyncSiapathParams object
// with the ability to set a context for a request.
func NewGetRenterDownloadasyncSiapathParamsWithContext(ctx context.Context) *GetRenterDownloadasyncSiapathParams {
	return &GetRenterDownloadasyncSiapathParams{
		Context: ctx,
	}
}

// NewGetRenterDownloadasyncSiapathParamsWithHTTPClient creates a new GetRenterDownloadasyncSiapathParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRenterDownloadasyncSiapathParamsWithHTTPClient(client *http.Client) *GetRenterDownloadasyncSiapathParams {
	return &GetRenterDownloadasyncSiapathParams{
		HTTPClient: client,
	}
}

/* GetRenterDownloadasyncSiapathParams contains all the parameters to send to the API endpoint
   for the get renter downloadasync siapath operation.

   Typically these are written to a http.Request.
*/
type GetRenterDownloadasyncSiapathParams struct {

	/* Destination.

	   Location on disk that the file will be downloaded to.
	*/
	Destination string

	/* Siapath.

	   Location of the file in the renter on the network.
	*/
	Siapath string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get renter downloadasync siapath params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRenterDownloadasyncSiapathParams) WithDefaults() *GetRenterDownloadasyncSiapathParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get renter downloadasync siapath params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRenterDownloadasyncSiapathParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) WithTimeout(timeout time.Duration) *GetRenterDownloadasyncSiapathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) WithContext(ctx context.Context) *GetRenterDownloadasyncSiapathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) WithHTTPClient(client *http.Client) *GetRenterDownloadasyncSiapathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDestination adds the destination to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) WithDestination(destination string) *GetRenterDownloadasyncSiapathParams {
	o.SetDestination(destination)
	return o
}

// SetDestination adds the destination to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) SetDestination(destination string) {
	o.Destination = destination
}

// WithSiapath adds the siapath to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) WithSiapath(siapath string) *GetRenterDownloadasyncSiapathParams {
	o.SetSiapath(siapath)
	return o
}

// SetSiapath adds the siapath to the get renter downloadasync siapath params
func (o *GetRenterDownloadasyncSiapathParams) SetSiapath(siapath string) {
	o.Siapath = siapath
}

// WriteToRequest writes these params to a swagger request
func (o *GetRenterDownloadasyncSiapathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param destination
	qrDestination := o.Destination
	qDestination := qrDestination
	if qDestination != "" {

		if err := r.SetQueryParam("destination", qDestination); err != nil {
			return err
		}
	}

	// path param siapath
	if err := r.SetPathParam("siapath", o.Siapath); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
