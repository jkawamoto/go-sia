// Code generated by go-swagger; DO NOT EDIT.

package renter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jkawamoto/go-sia/models"
)

// GetRenterBackupReader is a Reader for the GetRenterBackup structure.
type GetRenterBackupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRenterBackupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRenterBackupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetRenterBackupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRenterBackupOK creates a GetRenterBackupOK with default headers values
func NewGetRenterBackupOK() *GetRenterBackupOK {
	return &GetRenterBackupOK{}
}

/*GetRenterBackupOK handles this case with default header values.

Successful Response
*/
type GetRenterBackupOK struct {
	Payload *GetRenterBackupOKBody
}

func (o *GetRenterBackupOK) Error() string {
	return fmt.Sprintf("[GET /renter/backup][%d] getRenterBackupOK  %+v", 200, o.Payload)
}

func (o *GetRenterBackupOK) GetPayload() *GetRenterBackupOKBody {
	return o.Payload
}

func (o *GetRenterBackupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRenterBackupOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRenterBackupDefault creates a GetRenterBackupDefault with default headers values
func NewGetRenterBackupDefault(code int) *GetRenterBackupDefault {
	return &GetRenterBackupDefault{
		_statusCode: code,
	}
}

/*GetRenterBackupDefault handles this case with default header values.

Error Response
*/
type GetRenterBackupDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get renter backup default response
func (o *GetRenterBackupDefault) Code() int {
	return o._statusCode
}

func (o *GetRenterBackupDefault) Error() string {
	return fmt.Sprintf("[GET /renter/backup][%d] GetRenterBackup default  %+v", o._statusCode, o.Payload)
}

func (o *GetRenterBackupDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *GetRenterBackupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BackupsItems0 backups items0
swagger:model BackupsItems0
*/
type BackupsItems0 struct {

	// creationdate
	Creationdate int64 `json:"creationdate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// uploadprogress
	Uploadprogress float64 `json:"uploadprogress,omitempty"`
}

// Validate validates this backups items0
func (o *BackupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BackupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BackupsItems0) UnmarshalBinary(b []byte) error {
	var res BackupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetRenterBackupOKBody get renter backup o k body
swagger:model GetRenterBackupOKBody
*/
type GetRenterBackupOKBody struct {

	// backups
	Backups []*BackupsItems0 `json:"backups"`

	// syncedhosts
	Syncedhosts []*SyncedhostsItems0 `json:"syncedhosts"`

	// unsyncedhosts
	Unsyncedhosts []*UnsyncedhostsItems0 `json:"unsyncedhosts"`
}

// Validate validates this get renter backup o k body
func (o *GetRenterBackupOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackups(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSyncedhosts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsyncedhosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRenterBackupOKBody) validateBackups(formats strfmt.Registry) error {

	if swag.IsZero(o.Backups) { // not required
		return nil
	}

	for i := 0; i < len(o.Backups); i++ {
		if swag.IsZero(o.Backups[i]) { // not required
			continue
		}

		if o.Backups[i] != nil {
			if err := o.Backups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRenterBackupOK" + "." + "backups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetRenterBackupOKBody) validateSyncedhosts(formats strfmt.Registry) error {

	if swag.IsZero(o.Syncedhosts) { // not required
		return nil
	}

	for i := 0; i < len(o.Syncedhosts); i++ {
		if swag.IsZero(o.Syncedhosts[i]) { // not required
			continue
		}

		if o.Syncedhosts[i] != nil {
			if err := o.Syncedhosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRenterBackupOK" + "." + "syncedhosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetRenterBackupOKBody) validateUnsyncedhosts(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsyncedhosts) { // not required
		return nil
	}

	for i := 0; i < len(o.Unsyncedhosts); i++ {
		if swag.IsZero(o.Unsyncedhosts[i]) { // not required
			continue
		}

		if o.Unsyncedhosts[i] != nil {
			if err := o.Unsyncedhosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRenterBackupOK" + "." + "unsyncedhosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRenterBackupOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRenterBackupOKBody) UnmarshalBinary(b []byte) error {
	var res GetRenterBackupOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SyncedhostsItems0 syncedhosts items0
swagger:model SyncedhostsItems0
*/
type SyncedhostsItems0 struct {

	// algorithm
	Algorithm string `json:"algorithm,omitempty"`

	// key
	Key string `json:"key,omitempty"`
}

// Validate validates this syncedhosts items0
func (o *SyncedhostsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SyncedhostsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SyncedhostsItems0) UnmarshalBinary(b []byte) error {
	var res SyncedhostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UnsyncedhostsItems0 unsyncedhosts items0
swagger:model UnsyncedhostsItems0
*/
type UnsyncedhostsItems0 struct {

	// algorithm
	Algorithm string `json:"algorithm,omitempty"`

	// key
	Key string `json:"key,omitempty"`
}

// Validate validates this unsyncedhosts items0
func (o *UnsyncedhostsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UnsyncedhostsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UnsyncedhostsItems0) UnmarshalBinary(b []byte) error {
	var res UnsyncedhostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
