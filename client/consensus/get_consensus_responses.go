// Code generated by go-swagger; DO NOT EDIT.

package consensus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jkawamoto/go-sia/models"
)

// GetConsensusReader is a Reader for the GetConsensus structure.
type GetConsensusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConsensusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConsensusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetConsensusDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetConsensusOK creates a GetConsensusOK with default headers values
func NewGetConsensusOK() *GetConsensusOK {
	return &GetConsensusOK{}
}

/* GetConsensusOK describes a response with status code 200, with default header values.

Successful Response
*/
type GetConsensusOK struct {
	Payload *GetConsensusOKBody
}

func (o *GetConsensusOK) Error() string {
	return fmt.Sprintf("[GET /consensus][%d] getConsensusOK  %+v", 200, o.Payload)
}
func (o *GetConsensusOK) GetPayload() *GetConsensusOKBody {
	return o.Payload
}

func (o *GetConsensusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetConsensusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsensusDefault creates a GetConsensusDefault with default headers values
func NewGetConsensusDefault(code int) *GetConsensusDefault {
	return &GetConsensusDefault{
		_statusCode: code,
	}
}

/* GetConsensusDefault describes a response with status code -1, with default header values.

Error Response
*/
type GetConsensusDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get consensus default response
func (o *GetConsensusDefault) Code() int {
	return o._statusCode
}

func (o *GetConsensusDefault) Error() string {
	return fmt.Sprintf("[GET /consensus][%d] GetConsensus default  %+v", o._statusCode, o.Payload)
}
func (o *GetConsensusDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *GetConsensusDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetConsensusOKBody get consensus o k body
swagger:model GetConsensusOKBody
*/
type GetConsensusOKBody struct {

	// currentblock
	Currentblock string `json:"currentblock,omitempty"`

	// Number of blocks preceding the current block.
	// Example: 62248
	Height int64 `json:"height,omitempty"`

	// True if the consensus set is synced with the network, i.e. it has downloaded the entire blockchain.
	Synced bool `json:"synced,omitempty"`
}

// Validate validates this get consensus o k body
func (o *GetConsensusOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get consensus o k body based on context it is used
func (o *GetConsensusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetConsensusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConsensusOKBody) UnmarshalBinary(b []byte) error {
	var res GetConsensusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
