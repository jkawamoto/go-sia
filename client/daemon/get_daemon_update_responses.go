// Code generated by go-swagger; DO NOT EDIT.

package daemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jkawamoto/go-sia/models"
)

// GetDaemonUpdateReader is a Reader for the GetDaemonUpdate structure.
type GetDaemonUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDaemonUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDaemonUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDaemonUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDaemonUpdateOK creates a GetDaemonUpdateOK with default headers values
func NewGetDaemonUpdateOK() *GetDaemonUpdateOK {
	return &GetDaemonUpdateOK{}
}

/*GetDaemonUpdateOK handles this case with default header values.

Successful Response
*/
type GetDaemonUpdateOK struct {
	Payload *GetDaemonUpdateOKBody
}

func (o *GetDaemonUpdateOK) Error() string {
	return fmt.Sprintf("[GET /daemon/update][%d] getDaemonUpdateOK  %+v", 200, o.Payload)
}

func (o *GetDaemonUpdateOK) GetPayload() *GetDaemonUpdateOKBody {
	return o.Payload
}

func (o *GetDaemonUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDaemonUpdateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDaemonUpdateDefault creates a GetDaemonUpdateDefault with default headers values
func NewGetDaemonUpdateDefault(code int) *GetDaemonUpdateDefault {
	return &GetDaemonUpdateDefault{
		_statusCode: code,
	}
}

/*GetDaemonUpdateDefault handles this case with default header values.

Error Response
*/
type GetDaemonUpdateDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get daemon update default response
func (o *GetDaemonUpdateDefault) Code() int {
	return o._statusCode
}

func (o *GetDaemonUpdateDefault) Error() string {
	return fmt.Sprintf("[GET /daemon/update][%d] GetDaemonUpdate default  %+v", o._statusCode, o.Payload)
}

func (o *GetDaemonUpdateDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *GetDaemonUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetDaemonUpdateOKBody get daemon update o k body
swagger:model GetDaemonUpdateOKBody
*/
type GetDaemonUpdateOKBody struct {

	// Available indicates whether or not there is an update available for the daemon.
	Available bool `json:"available,omitempty"`

	// Version is the version of the latest release.
	Version string `json:"version,omitempty"`
}

// Validate validates this get daemon update o k body
func (o *GetDaemonUpdateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDaemonUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDaemonUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res GetDaemonUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
