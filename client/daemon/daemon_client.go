// Code generated by go-swagger; DO NOT EDIT.

package daemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new daemon API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for daemon API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDaemonConstants(params *GetDaemonConstantsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonConstantsOK, error)

	GetDaemonStop(params *GetDaemonStopParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonStopOK, error)

	GetDaemonUpdate(params *GetDaemonUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonUpdateOK, error)

	GetDaemonVersion(params *GetDaemonVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonVersionOK, error)

	PostDaemonUpdate(params *PostDaemonUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDaemonUpdateNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDaemonConstants Returns the set of constants in use.
*/
func (a *Client) GetDaemonConstants(params *GetDaemonConstantsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonConstantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDaemonConstantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDaemonConstants",
		Method:             "GET",
		PathPattern:        "/daemon/constants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDaemonConstantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDaemonConstantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDaemonConstantsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDaemonStop cleanly shuts down the daemon. May take a few seconds.
*/
func (a *Client) GetDaemonStop(params *GetDaemonStopParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDaemonStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDaemonStop",
		Method:             "GET",
		PathPattern:        "/daemon/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDaemonStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDaemonStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDaemonStopDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDaemonUpdate returns the the status of any updates available for the daemon
*/
func (a *Client) GetDaemonUpdate(params *GetDaemonUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDaemonUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDaemonUpdate",
		Method:             "GET",
		PathPattern:        "/daemon/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDaemonUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDaemonUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDaemonUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDaemonVersion returns the version of the Sia daemon currently running.
*/
func (a *Client) GetDaemonVersion(params *GetDaemonVersionParams, authInfo runtime.ClientAuthInfoWriter) (*GetDaemonVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDaemonVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDaemonVersion",
		Method:             "GET",
		PathPattern:        "/daemon/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDaemonVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDaemonVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDaemonVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostDaemonUpdate updates the daemon to the latest available version release.
*/
func (a *Client) PostDaemonUpdate(params *PostDaemonUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDaemonUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDaemonUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDaemonUpdate",
		Method:             "POST",
		PathPattern:        "/daemon/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDaemonUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDaemonUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDaemonUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
