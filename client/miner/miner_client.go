// Code generated by go-swagger; DO NOT EDIT.

package miner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new miner API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for miner API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetMiner returns the status of the miner.
*/
func (a *Client) GetMiner(params *GetMinerParams, authInfo runtime.ClientAuthInfoWriter) (*GetMinerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMiner",
		Method:             "GET",
		PathPattern:        "/miner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMinerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMinerHeader provides a block header that is ready to be grinded on for work.
*/
func (a *Client) GetMinerHeader(params *GetMinerHeaderParams, authInfo runtime.ClientAuthInfoWriter) (*GetMinerHeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinerHeaderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMinerHeader",
		Method:             "GET",
		PathPattern:        "/miner/header",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMinerHeaderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinerHeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinerHeaderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMinerStart starts a single threaded cpu miner. Does nothing if the cpu miner is already running.
*/
func (a *Client) GetMinerStart(params *GetMinerStartParams, authInfo runtime.ClientAuthInfoWriter) (*GetMinerStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinerStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMinerStart",
		Method:             "GET",
		PathPattern:        "/miner/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMinerStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinerStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinerStartDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMinerStop stops the cpu miner. Does nothing if the cpu miner is not running.
*/
func (a *Client) GetMinerStop(params *GetMinerStopParams, authInfo runtime.ClientAuthInfoWriter) (*GetMinerStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinerStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMinerStop",
		Method:             "GET",
		PathPattern:        "/miner/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMinerStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMinerStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMinerStopDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostMinerHeader submits a header that has passed the POW.
*/
func (a *Client) PostMinerHeader(params *PostMinerHeaderParams, authInfo runtime.ClientAuthInfoWriter) (*PostMinerHeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMinerHeaderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMinerHeader",
		Method:             "POST",
		PathPattern:        "/miner/header",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMinerHeaderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMinerHeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostMinerHeaderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
