// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostHostAnnounceParams creates a new PostHostAnnounceParams object
// with the default values initialized.
func NewPostHostAnnounceParams() *PostHostAnnounceParams {
	var ()
	return &PostHostAnnounceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostHostAnnounceParamsWithTimeout creates a new PostHostAnnounceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostHostAnnounceParamsWithTimeout(timeout time.Duration) *PostHostAnnounceParams {
	var ()
	return &PostHostAnnounceParams{

		timeout: timeout,
	}
}

// NewPostHostAnnounceParamsWithContext creates a new PostHostAnnounceParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostHostAnnounceParamsWithContext(ctx context.Context) *PostHostAnnounceParams {
	var ()
	return &PostHostAnnounceParams{

		Context: ctx,
	}
}

// NewPostHostAnnounceParamsWithHTTPClient creates a new PostHostAnnounceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostHostAnnounceParamsWithHTTPClient(client *http.Client) *PostHostAnnounceParams {
	var ()
	return &PostHostAnnounceParams{
		HTTPClient: client,
	}
}

/*PostHostAnnounceParams contains all the parameters to send to the API endpoint
for the post host announce operation typically these are written to a http.Request
*/
type PostHostAnnounceParams struct {

	/*Netaddress
	  The address to be announced. If no address is provided, the automatically discovered address will be used instead.

	*/
	Netaddress *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post host announce params
func (o *PostHostAnnounceParams) WithTimeout(timeout time.Duration) *PostHostAnnounceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post host announce params
func (o *PostHostAnnounceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post host announce params
func (o *PostHostAnnounceParams) WithContext(ctx context.Context) *PostHostAnnounceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post host announce params
func (o *PostHostAnnounceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post host announce params
func (o *PostHostAnnounceParams) WithHTTPClient(client *http.Client) *PostHostAnnounceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post host announce params
func (o *PostHostAnnounceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetaddress adds the netaddress to the post host announce params
func (o *PostHostAnnounceParams) WithNetaddress(netaddress *string) *PostHostAnnounceParams {
	o.SetNetaddress(netaddress)
	return o
}

// SetNetaddress adds the netaddress to the post host announce params
func (o *PostHostAnnounceParams) SetNetaddress(netaddress *string) {
	o.Netaddress = netaddress
}

// WriteToRequest writes these params to a swagger request
func (o *PostHostAnnounceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Netaddress != nil {

		// query param netaddress
		var qrNetaddress string
		if o.Netaddress != nil {
			qrNetaddress = *o.Netaddress
		}
		qNetaddress := qrNetaddress
		if qNetaddress != "" {
			if err := r.SetQueryParam("netaddress", qNetaddress); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
