// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/jkawamoto/go-sia/models"
)

// GetHostStorageReader is a Reader for the GetHostStorage structure.
type GetHostStorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHostStorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetHostStorageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetHostStorageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHostStorageOK creates a GetHostStorageOK with default headers values
func NewGetHostStorageOK() *GetHostStorageOK {
	return &GetHostStorageOK{}
}

/*GetHostStorageOK handles this case with default header values.

Successful Response
*/
type GetHostStorageOK struct {
	Payload *GetHostStorageOKBody
}

func (o *GetHostStorageOK) Error() string {
	return fmt.Sprintf("[GET /host/storage][%d] getHostStorageOK  %+v", 200, o.Payload)
}

func (o *GetHostStorageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetHostStorageOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostStorageDefault creates a GetHostStorageDefault with default headers values
func NewGetHostStorageDefault(code int) *GetHostStorageDefault {
	return &GetHostStorageDefault{
		_statusCode: code,
	}
}

/*GetHostStorageDefault handles this case with default header values.

Error Response
*/
type GetHostStorageDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get host storage default response
func (o *GetHostStorageDefault) Code() int {
	return o._statusCode
}

func (o *GetHostStorageDefault) Error() string {
	return fmt.Sprintf("[GET /host/storage][%d] GetHostStorage default  %+v", o._statusCode, o.Payload)
}

func (o *GetHostStorageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*FoldersItems0 folders items0
swagger:model FoldersItems0
*/
type FoldersItems0 struct {

	// Maximum capacity of the storage folder. The host will not store more
	// than this many bytes in the folder. This capacity is not checked
	// against the drive's remaining capacity. Therefore, you must manually
	// ensure the disk has sufficient capacity for the folder at all times.
	// Otherwise you risk losing renter's data and failing storage proofs.
	//
	Capacity int64 `json:"capacity,omitempty"`

	// Unused capacity of the storage folder.
	Capacityremaining int64 `json:"capacityremaining,omitempty"`

	// Number of failed disk read & write operations. A large number of
	// failed reads or writes indicates a problem with the filesystem or
	// drive's hardware.
	//
	Failedreads int64 `json:"failedreads,omitempty"`

	// failedwrites
	Failedwrites int64 `json:"failedwrites,omitempty"`

	// Absolute path to the storage folder on the local filesystem.
	Path string `json:"path,omitempty"`

	// Number of successful read & write operations.
	Successfulreads int64 `json:"successfulreads,omitempty"`

	// successfulwrites
	Successfulwrites int64 `json:"successfulwrites,omitempty"`
}

// Validate validates this folders items0
func (o *FoldersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FoldersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FoldersItems0) UnmarshalBinary(b []byte) error {
	var res FoldersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetHostStorageOKBody get host storage o k body
swagger:model GetHostStorageOKBody
*/
type GetHostStorageOKBody struct {

	// folders
	Folders []*FoldersItems0 `json:"folders"`
}

// Validate validates this get host storage o k body
func (o *GetHostStorageOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFolders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHostStorageOKBody) validateFolders(formats strfmt.Registry) error {

	if swag.IsZero(o.Folders) { // not required
		return nil
	}

	for i := 0; i < len(o.Folders); i++ {
		if swag.IsZero(o.Folders[i]) { // not required
			continue
		}

		if o.Folders[i] != nil {
			if err := o.Folders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHostStorageOK" + "." + "folders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetHostStorageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHostStorageOKBody) UnmarshalBinary(b []byte) error {
	var res GetHostStorageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
