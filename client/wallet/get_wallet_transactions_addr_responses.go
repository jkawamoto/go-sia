// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jkawamoto/go-sia/models"
)

// GetWalletTransactionsAddrReader is a Reader for the GetWalletTransactionsAddr structure.
type GetWalletTransactionsAddrReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWalletTransactionsAddrReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWalletTransactionsAddrOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetWalletTransactionsAddrDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWalletTransactionsAddrOK creates a GetWalletTransactionsAddrOK with default headers values
func NewGetWalletTransactionsAddrOK() *GetWalletTransactionsAddrOK {
	return &GetWalletTransactionsAddrOK{}
}

/* GetWalletTransactionsAddrOK describes a response with status code 200, with default header values.

Successful Response
*/
type GetWalletTransactionsAddrOK struct {
	Payload *GetWalletTransactionsAddrOKBody
}

func (o *GetWalletTransactionsAddrOK) Error() string {
	return fmt.Sprintf("[GET /wallet/transactions/{addr}][%d] getWalletTransactionsAddrOK  %+v", 200, o.Payload)
}
func (o *GetWalletTransactionsAddrOK) GetPayload() *GetWalletTransactionsAddrOKBody {
	return o.Payload
}

func (o *GetWalletTransactionsAddrOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWalletTransactionsAddrOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWalletTransactionsAddrDefault creates a GetWalletTransactionsAddrDefault with default headers values
func NewGetWalletTransactionsAddrDefault(code int) *GetWalletTransactionsAddrDefault {
	return &GetWalletTransactionsAddrDefault{
		_statusCode: code,
	}
}

/* GetWalletTransactionsAddrDefault describes a response with status code -1, with default header values.

Error Response
*/
type GetWalletTransactionsAddrDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get wallet transactions addr default response
func (o *GetWalletTransactionsAddrDefault) Code() int {
	return o._statusCode
}

func (o *GetWalletTransactionsAddrDefault) Error() string {
	return fmt.Sprintf("[GET /wallet/transactions/{addr}][%d] GetWalletTransactionsAddr default  %+v", o._statusCode, o.Payload)
}
func (o *GetWalletTransactionsAddrDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *GetWalletTransactionsAddrDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetWalletTransactionsAddrOKBody get wallet transactions addr o k body
swagger:model GetWalletTransactionsAddrOKBody
*/
type GetWalletTransactionsAddrOKBody struct {

	// Array of processed transactions that relate to the supplied address.
	Transactions []*models.Transaction `json:"transactions"`
}

// Validate validates this get wallet transactions addr o k body
func (o *GetWalletTransactionsAddrOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWalletTransactionsAddrOKBody) validateTransactions(formats strfmt.Registry) error {
	if swag.IsZero(o.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(o.Transactions); i++ {
		if swag.IsZero(o.Transactions[i]) { // not required
			continue
		}

		if o.Transactions[i] != nil {
			if err := o.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWalletTransactionsAddrOK" + "." + "transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get wallet transactions addr o k body based on the context it is used
func (o *GetWalletTransactionsAddrOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWalletTransactionsAddrOKBody) contextValidateTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Transactions); i++ {

		if o.Transactions[i] != nil {
			if err := o.Transactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWalletTransactionsAddrOK" + "." + "transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWalletTransactionsAddrOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWalletTransactionsAddrOKBody) UnmarshalBinary(b []byte) error {
	var res GetWalletTransactionsAddrOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
