// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostWalletSiagkeyParams creates a new PostWalletSiagkeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostWalletSiagkeyParams() *PostWalletSiagkeyParams {
	return &PostWalletSiagkeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostWalletSiagkeyParamsWithTimeout creates a new PostWalletSiagkeyParams object
// with the ability to set a timeout on a request.
func NewPostWalletSiagkeyParamsWithTimeout(timeout time.Duration) *PostWalletSiagkeyParams {
	return &PostWalletSiagkeyParams{
		timeout: timeout,
	}
}

// NewPostWalletSiagkeyParamsWithContext creates a new PostWalletSiagkeyParams object
// with the ability to set a context for a request.
func NewPostWalletSiagkeyParamsWithContext(ctx context.Context) *PostWalletSiagkeyParams {
	return &PostWalletSiagkeyParams{
		Context: ctx,
	}
}

// NewPostWalletSiagkeyParamsWithHTTPClient creates a new PostWalletSiagkeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostWalletSiagkeyParamsWithHTTPClient(client *http.Client) *PostWalletSiagkeyParams {
	return &PostWalletSiagkeyParams{
		HTTPClient: client,
	}
}

/* PostWalletSiagkeyParams contains all the parameters to send to the API endpoint
   for the post wallet siagkey operation.

   Typically these are written to a http.Request.
*/
type PostWalletSiagkeyParams struct {

	/* Encryptionpassword.

	   Key that is used to encrypt the siag key when it is imported to the wallet.
	*/
	Encryptionpassword string

	/* Keyfiles.

	   List of filepaths that point to the keyfiles that make up the siag key. There should be at least one keyfile per required signature. The filenames need to be commna separated (no spaces), which means filepaths that contain a comma are not allowed.
	*/
	Keyfiles string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post wallet siagkey params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWalletSiagkeyParams) WithDefaults() *PostWalletSiagkeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post wallet siagkey params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWalletSiagkeyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) WithTimeout(timeout time.Duration) *PostWalletSiagkeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) WithContext(ctx context.Context) *PostWalletSiagkeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) WithHTTPClient(client *http.Client) *PostWalletSiagkeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptionpassword adds the encryptionpassword to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) WithEncryptionpassword(encryptionpassword string) *PostWalletSiagkeyParams {
	o.SetEncryptionpassword(encryptionpassword)
	return o
}

// SetEncryptionpassword adds the encryptionpassword to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) SetEncryptionpassword(encryptionpassword string) {
	o.Encryptionpassword = encryptionpassword
}

// WithKeyfiles adds the keyfiles to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) WithKeyfiles(keyfiles string) *PostWalletSiagkeyParams {
	o.SetKeyfiles(keyfiles)
	return o
}

// SetKeyfiles adds the keyfiles to the post wallet siagkey params
func (o *PostWalletSiagkeyParams) SetKeyfiles(keyfiles string) {
	o.Keyfiles = keyfiles
}

// WriteToRequest writes these params to a swagger request
func (o *PostWalletSiagkeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param encryptionpassword
	qrEncryptionpassword := o.Encryptionpassword
	qEncryptionpassword := qrEncryptionpassword
	if qEncryptionpassword != "" {

		if err := r.SetQueryParam("encryptionpassword", qEncryptionpassword); err != nil {
			return err
		}
	}

	// query param keyfiles
	qrKeyfiles := o.Keyfiles
	qKeyfiles := qrKeyfiles
	if qKeyfiles != "" {

		if err := r.SetQueryParam("keyfiles", qKeyfiles); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
