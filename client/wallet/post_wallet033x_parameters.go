// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostWallet033xParams creates a new PostWallet033xParams object
// with the default values initialized.
func NewPostWallet033xParams() *PostWallet033xParams {
	var ()
	return &PostWallet033xParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostWallet033xParamsWithTimeout creates a new PostWallet033xParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostWallet033xParamsWithTimeout(timeout time.Duration) *PostWallet033xParams {
	var ()
	return &PostWallet033xParams{

		timeout: timeout,
	}
}

// NewPostWallet033xParamsWithContext creates a new PostWallet033xParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostWallet033xParamsWithContext(ctx context.Context) *PostWallet033xParams {
	var ()
	return &PostWallet033xParams{

		Context: ctx,
	}
}

// NewPostWallet033xParamsWithHTTPClient creates a new PostWallet033xParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostWallet033xParamsWithHTTPClient(client *http.Client) *PostWallet033xParams {
	var ()
	return &PostWallet033xParams{
		HTTPClient: client,
	}
}

/*PostWallet033xParams contains all the parameters to send to the API endpoint
for the post wallet033x operation typically these are written to a http.Request
*/
type PostWallet033xParams struct {

	/*Encryptionpassword
	  Encryption key of the wallet.

	*/
	Encryptionpassword *string
	/*Source
	  Path on disk to the v0.3.3.x wallet to be loaded.

	*/
	Source *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post wallet033x params
func (o *PostWallet033xParams) WithTimeout(timeout time.Duration) *PostWallet033xParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet033x params
func (o *PostWallet033xParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet033x params
func (o *PostWallet033xParams) WithContext(ctx context.Context) *PostWallet033xParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet033x params
func (o *PostWallet033xParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet033x params
func (o *PostWallet033xParams) WithHTTPClient(client *http.Client) *PostWallet033xParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet033x params
func (o *PostWallet033xParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptionpassword adds the encryptionpassword to the post wallet033x params
func (o *PostWallet033xParams) WithEncryptionpassword(encryptionpassword *string) *PostWallet033xParams {
	o.SetEncryptionpassword(encryptionpassword)
	return o
}

// SetEncryptionpassword adds the encryptionpassword to the post wallet033x params
func (o *PostWallet033xParams) SetEncryptionpassword(encryptionpassword *string) {
	o.Encryptionpassword = encryptionpassword
}

// WithSource adds the source to the post wallet033x params
func (o *PostWallet033xParams) WithSource(source *string) *PostWallet033xParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the post wallet033x params
func (o *PostWallet033xParams) SetSource(source *string) {
	o.Source = source
}

// WriteToRequest writes these params to a swagger request
func (o *PostWallet033xParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Encryptionpassword != nil {

		// query param encryptionpassword
		var qrEncryptionpassword string
		if o.Encryptionpassword != nil {
			qrEncryptionpassword = *o.Encryptionpassword
		}
		qEncryptionpassword := qrEncryptionpassword
		if qEncryptionpassword != "" {
			if err := r.SetQueryParam("encryptionpassword", qEncryptionpassword); err != nil {
				return err
			}
		}

	}

	if o.Source != nil {

		// query param source
		var qrSource string
		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {
			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
