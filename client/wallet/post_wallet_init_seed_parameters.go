// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostWalletInitSeedParams creates a new PostWalletInitSeedParams object
// with the default values initialized.
func NewPostWalletInitSeedParams() *PostWalletInitSeedParams {
	var ()
	return &PostWalletInitSeedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostWalletInitSeedParamsWithTimeout creates a new PostWalletInitSeedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostWalletInitSeedParamsWithTimeout(timeout time.Duration) *PostWalletInitSeedParams {
	var ()
	return &PostWalletInitSeedParams{

		timeout: timeout,
	}
}

// NewPostWalletInitSeedParamsWithContext creates a new PostWalletInitSeedParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostWalletInitSeedParamsWithContext(ctx context.Context) *PostWalletInitSeedParams {
	var ()
	return &PostWalletInitSeedParams{

		Context: ctx,
	}
}

// NewPostWalletInitSeedParamsWithHTTPClient creates a new PostWalletInitSeedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostWalletInitSeedParamsWithHTTPClient(client *http.Client) *PostWalletInitSeedParams {
	var ()
	return &PostWalletInitSeedParams{
		HTTPClient: client,
	}
}

/*PostWalletInitSeedParams contains all the parameters to send to the API endpoint
for the post wallet init seed operation typically these are written to a http.Request
*/
type PostWalletInitSeedParams struct {

	/*Dictionary
	  Name of the dictionary that should be used when encoding the seed. 'english' is the most common choice when picking a dictionary.

	*/
	Dictionary *string
	/*Encryptionpassword
	  Password that will be used to encrypt the wallet. All subsequent calls should use this password. If left blank, the seed that gets returned will also be the encryption password.

	*/
	Encryptionpassword string
	/*Force
	  boolean, when set to true /wallet/init will Reset the wallet if one exists instead of returning an error. This allows API callers to reinitialize a new wallet.

	*/
	Force bool
	/*Seed
	  Dictionary-encoded phrase that corresponds to the seed being used to initialize the wallet.

	*/
	Seed string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithTimeout(timeout time.Duration) *PostWalletInitSeedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithContext(ctx context.Context) *PostWalletInitSeedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithHTTPClient(client *http.Client) *PostWalletInitSeedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDictionary adds the dictionary to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithDictionary(dictionary *string) *PostWalletInitSeedParams {
	o.SetDictionary(dictionary)
	return o
}

// SetDictionary adds the dictionary to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetDictionary(dictionary *string) {
	o.Dictionary = dictionary
}

// WithEncryptionpassword adds the encryptionpassword to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithEncryptionpassword(encryptionpassword string) *PostWalletInitSeedParams {
	o.SetEncryptionpassword(encryptionpassword)
	return o
}

// SetEncryptionpassword adds the encryptionpassword to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetEncryptionpassword(encryptionpassword string) {
	o.Encryptionpassword = encryptionpassword
}

// WithForce adds the force to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithForce(force bool) *PostWalletInitSeedParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetForce(force bool) {
	o.Force = force
}

// WithSeed adds the seed to the post wallet init seed params
func (o *PostWalletInitSeedParams) WithSeed(seed string) *PostWalletInitSeedParams {
	o.SetSeed(seed)
	return o
}

// SetSeed adds the seed to the post wallet init seed params
func (o *PostWalletInitSeedParams) SetSeed(seed string) {
	o.Seed = seed
}

// WriteToRequest writes these params to a swagger request
func (o *PostWalletInitSeedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dictionary != nil {

		// query param dictionary
		var qrDictionary string
		if o.Dictionary != nil {
			qrDictionary = *o.Dictionary
		}
		qDictionary := qrDictionary
		if qDictionary != "" {
			if err := r.SetQueryParam("dictionary", qDictionary); err != nil {
				return err
			}
		}

	}

	// query param encryptionpassword
	qrEncryptionpassword := o.Encryptionpassword
	qEncryptionpassword := qrEncryptionpassword
	if qEncryptionpassword != "" {
		if err := r.SetQueryParam("encryptionpassword", qEncryptionpassword); err != nil {
			return err
		}
	}

	// query param force
	qrForce := o.Force
	qForce := swag.FormatBool(qrForce)
	if qForce != "" {
		if err := r.SetQueryParam("force", qForce); err != nil {
			return err
		}
	}

	// query param seed
	qrSeed := o.Seed
	qSeed := qrSeed
	if qSeed != "" {
		if err := r.SetQueryParam("seed", qSeed); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
