// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostWalletUnlockParams creates a new PostWalletUnlockParams object
// with the default values initialized.
func NewPostWalletUnlockParams() *PostWalletUnlockParams {
	var ()
	return &PostWalletUnlockParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostWalletUnlockParamsWithTimeout creates a new PostWalletUnlockParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostWalletUnlockParamsWithTimeout(timeout time.Duration) *PostWalletUnlockParams {
	var ()
	return &PostWalletUnlockParams{

		timeout: timeout,
	}
}

// NewPostWalletUnlockParamsWithContext creates a new PostWalletUnlockParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostWalletUnlockParamsWithContext(ctx context.Context) *PostWalletUnlockParams {
	var ()
	return &PostWalletUnlockParams{

		Context: ctx,
	}
}

// NewPostWalletUnlockParamsWithHTTPClient creates a new PostWalletUnlockParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostWalletUnlockParamsWithHTTPClient(client *http.Client) *PostWalletUnlockParams {
	var ()
	return &PostWalletUnlockParams{
		HTTPClient: client,
	}
}

/*PostWalletUnlockParams contains all the parameters to send to the API endpoint
for the post wallet unlock operation typically these are written to a http.Request
*/
type PostWalletUnlockParams struct {

	/*Encryptionpassword
	  Password that gets used to decrypt the file. Most frequently, the encryption password is the same as the primary wallet seed.

	*/
	Encryptionpassword *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post wallet unlock params
func (o *PostWalletUnlockParams) WithTimeout(timeout time.Duration) *PostWalletUnlockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet unlock params
func (o *PostWalletUnlockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet unlock params
func (o *PostWalletUnlockParams) WithContext(ctx context.Context) *PostWalletUnlockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet unlock params
func (o *PostWalletUnlockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet unlock params
func (o *PostWalletUnlockParams) WithHTTPClient(client *http.Client) *PostWalletUnlockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet unlock params
func (o *PostWalletUnlockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptionpassword adds the encryptionpassword to the post wallet unlock params
func (o *PostWalletUnlockParams) WithEncryptionpassword(encryptionpassword *string) *PostWalletUnlockParams {
	o.SetEncryptionpassword(encryptionpassword)
	return o
}

// SetEncryptionpassword adds the encryptionpassword to the post wallet unlock params
func (o *PostWalletUnlockParams) SetEncryptionpassword(encryptionpassword *string) {
	o.Encryptionpassword = encryptionpassword
}

// WriteToRequest writes these params to a swagger request
func (o *PostWalletUnlockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Encryptionpassword != nil {

		// query param encryptionpassword
		var qrEncryptionpassword string
		if o.Encryptionpassword != nil {
			qrEncryptionpassword = *o.Encryptionpassword
		}
		qEncryptionpassword := qrEncryptionpassword
		if qEncryptionpassword != "" {
			if err := r.SetQueryParam("encryptionpassword", qEncryptionpassword); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
