// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostWalletChangepasswordParams creates a new PostWalletChangepasswordParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostWalletChangepasswordParams() *PostWalletChangepasswordParams {
	return &PostWalletChangepasswordParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostWalletChangepasswordParamsWithTimeout creates a new PostWalletChangepasswordParams object
// with the ability to set a timeout on a request.
func NewPostWalletChangepasswordParamsWithTimeout(timeout time.Duration) *PostWalletChangepasswordParams {
	return &PostWalletChangepasswordParams{
		timeout: timeout,
	}
}

// NewPostWalletChangepasswordParamsWithContext creates a new PostWalletChangepasswordParams object
// with the ability to set a context for a request.
func NewPostWalletChangepasswordParamsWithContext(ctx context.Context) *PostWalletChangepasswordParams {
	return &PostWalletChangepasswordParams{
		Context: ctx,
	}
}

// NewPostWalletChangepasswordParamsWithHTTPClient creates a new PostWalletChangepasswordParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostWalletChangepasswordParamsWithHTTPClient(client *http.Client) *PostWalletChangepasswordParams {
	return &PostWalletChangepasswordParams{
		HTTPClient: client,
	}
}

/* PostWalletChangepasswordParams contains all the parameters to send to the API endpoint
   for the post wallet changepassword operation.

   Typically these are written to a http.Request.
*/
type PostWalletChangepasswordParams struct {

	/* Encryptionpassword.

	   encryptionpassword is the wallet's current encryption password.
	*/
	Encryptionpassword string

	/* Newpassword.

	   newpassword is the new password for the wallet.
	*/
	Newpassword string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post wallet changepassword params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWalletChangepasswordParams) WithDefaults() *PostWalletChangepasswordParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post wallet changepassword params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWalletChangepasswordParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) WithTimeout(timeout time.Duration) *PostWalletChangepasswordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) WithContext(ctx context.Context) *PostWalletChangepasswordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) WithHTTPClient(client *http.Client) *PostWalletChangepasswordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncryptionpassword adds the encryptionpassword to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) WithEncryptionpassword(encryptionpassword string) *PostWalletChangepasswordParams {
	o.SetEncryptionpassword(encryptionpassword)
	return o
}

// SetEncryptionpassword adds the encryptionpassword to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) SetEncryptionpassword(encryptionpassword string) {
	o.Encryptionpassword = encryptionpassword
}

// WithNewpassword adds the newpassword to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) WithNewpassword(newpassword string) *PostWalletChangepasswordParams {
	o.SetNewpassword(newpassword)
	return o
}

// SetNewpassword adds the newpassword to the post wallet changepassword params
func (o *PostWalletChangepasswordParams) SetNewpassword(newpassword string) {
	o.Newpassword = newpassword
}

// WriteToRequest writes these params to a swagger request
func (o *PostWalletChangepasswordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param encryptionpassword
	qrEncryptionpassword := o.Encryptionpassword
	qEncryptionpassword := qrEncryptionpassword
	if qEncryptionpassword != "" {

		if err := r.SetQueryParam("encryptionpassword", qEncryptionpassword); err != nil {
			return err
		}
	}

	// query param newpassword
	qrNewpassword := o.Newpassword
	qNewpassword := qrNewpassword
	if qNewpassword != "" {

		if err := r.SetQueryParam("newpassword", qNewpassword); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
