// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostWalletInitParams creates a new PostWalletInitParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostWalletInitParams() *PostWalletInitParams {
	return &PostWalletInitParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostWalletInitParamsWithTimeout creates a new PostWalletInitParams object
// with the ability to set a timeout on a request.
func NewPostWalletInitParamsWithTimeout(timeout time.Duration) *PostWalletInitParams {
	return &PostWalletInitParams{
		timeout: timeout,
	}
}

// NewPostWalletInitParamsWithContext creates a new PostWalletInitParams object
// with the ability to set a context for a request.
func NewPostWalletInitParamsWithContext(ctx context.Context) *PostWalletInitParams {
	return &PostWalletInitParams{
		Context: ctx,
	}
}

// NewPostWalletInitParamsWithHTTPClient creates a new PostWalletInitParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostWalletInitParamsWithHTTPClient(client *http.Client) *PostWalletInitParams {
	return &PostWalletInitParams{
		HTTPClient: client,
	}
}

/* PostWalletInitParams contains all the parameters to send to the API endpoint
   for the post wallet init operation.

   Typically these are written to a http.Request.
*/
type PostWalletInitParams struct {

	/* Dictionary.

	   Name of the dictionary that should be used when encoding the seed. 'english' is the most common choice when picking a dictionary.
	*/
	Dictionary *string

	/* Encryptionpassword.

	   Password that will be used to encrypt the wallet. All subsequent calls should use this password. If left blank, the seed that gets returned will also be the encryption password.
	*/
	Encryptionpassword *string

	/* Force.

	   boolean, when set to true /wallet/init will Reset the wallet if one exists instead of returning an error. This allows API callers to reinitialize a new wallet.
	*/
	Force *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post wallet init params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWalletInitParams) WithDefaults() *PostWalletInitParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post wallet init params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostWalletInitParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post wallet init params
func (o *PostWalletInitParams) WithTimeout(timeout time.Duration) *PostWalletInitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet init params
func (o *PostWalletInitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet init params
func (o *PostWalletInitParams) WithContext(ctx context.Context) *PostWalletInitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet init params
func (o *PostWalletInitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet init params
func (o *PostWalletInitParams) WithHTTPClient(client *http.Client) *PostWalletInitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet init params
func (o *PostWalletInitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDictionary adds the dictionary to the post wallet init params
func (o *PostWalletInitParams) WithDictionary(dictionary *string) *PostWalletInitParams {
	o.SetDictionary(dictionary)
	return o
}

// SetDictionary adds the dictionary to the post wallet init params
func (o *PostWalletInitParams) SetDictionary(dictionary *string) {
	o.Dictionary = dictionary
}

// WithEncryptionpassword adds the encryptionpassword to the post wallet init params
func (o *PostWalletInitParams) WithEncryptionpassword(encryptionpassword *string) *PostWalletInitParams {
	o.SetEncryptionpassword(encryptionpassword)
	return o
}

// SetEncryptionpassword adds the encryptionpassword to the post wallet init params
func (o *PostWalletInitParams) SetEncryptionpassword(encryptionpassword *string) {
	o.Encryptionpassword = encryptionpassword
}

// WithForce adds the force to the post wallet init params
func (o *PostWalletInitParams) WithForce(force *bool) *PostWalletInitParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the post wallet init params
func (o *PostWalletInitParams) SetForce(force *bool) {
	o.Force = force
}

// WriteToRequest writes these params to a swagger request
func (o *PostWalletInitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dictionary != nil {

		// query param dictionary
		var qrDictionary string

		if o.Dictionary != nil {
			qrDictionary = *o.Dictionary
		}
		qDictionary := qrDictionary
		if qDictionary != "" {

			if err := r.SetQueryParam("dictionary", qDictionary); err != nil {
				return err
			}
		}
	}

	if o.Encryptionpassword != nil {

		// query param encryptionpassword
		var qrEncryptionpassword string

		if o.Encryptionpassword != nil {
			qrEncryptionpassword = *o.Encryptionpassword
		}
		qEncryptionpassword := qrEncryptionpassword
		if qEncryptionpassword != "" {

			if err := r.SetQueryParam("encryptionpassword", qEncryptionpassword); err != nil {
				return err
			}
		}
	}

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
