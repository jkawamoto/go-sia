// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jkawamoto/go-sia/models"
)

// GetWalletSeedsReader is a Reader for the GetWalletSeeds structure.
type GetWalletSeedsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWalletSeedsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWalletSeedsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetWalletSeedsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWalletSeedsOK creates a GetWalletSeedsOK with default headers values
func NewGetWalletSeedsOK() *GetWalletSeedsOK {
	return &GetWalletSeedsOK{}
}

/* GetWalletSeedsOK describes a response with status code 200, with default header values.

Successful Response
*/
type GetWalletSeedsOK struct {
	Payload *GetWalletSeedsOKBody
}

func (o *GetWalletSeedsOK) Error() string {
	return fmt.Sprintf("[GET /wallet/seeds][%d] getWalletSeedsOK  %+v", 200, o.Payload)
}
func (o *GetWalletSeedsOK) GetPayload() *GetWalletSeedsOKBody {
	return o.Payload
}

func (o *GetWalletSeedsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWalletSeedsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWalletSeedsDefault creates a GetWalletSeedsDefault with default headers values
func NewGetWalletSeedsDefault(code int) *GetWalletSeedsDefault {
	return &GetWalletSeedsDefault{
		_statusCode: code,
	}
}

/* GetWalletSeedsDefault describes a response with status code -1, with default header values.

Error Response
*/
type GetWalletSeedsDefault struct {
	_statusCode int

	Payload *models.StandardError
}

// Code gets the status code for the get wallet seeds default response
func (o *GetWalletSeedsDefault) Code() int {
	return o._statusCode
}

func (o *GetWalletSeedsDefault) Error() string {
	return fmt.Sprintf("[GET /wallet/seeds][%d] GetWalletSeeds default  %+v", o._statusCode, o.Payload)
}
func (o *GetWalletSeedsDefault) GetPayload() *models.StandardError {
	return o.Payload
}

func (o *GetWalletSeedsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetWalletSeedsOKBody get wallet seeds o k body
swagger:model GetWalletSeedsOKBody
*/
type GetWalletSeedsOKBody struct {

	// Number of addresses that remain in the primary seed until exhaustion has been reached. Once exhaustion has been reached, new addresses will continue to be generated but they will be more difficult to recover in the event of a lost wallet file or encryption password.
	// Example: 2500
	Addressesremaining int64 `json:"addressesremaining,omitempty"`

	// Array of all seeds that the wallet references when scanning the blockchain for outputs. The wallet is able to spend any output generated by any of the seeds, however only the primary seed is being used to generate new addresses.
	// Example: ["hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello","foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo bar foo"]
	Allseeds []string `json:"allseeds"`

	// Seed that is actively being used to generate new addresses for the wallet.
	// Example: hello world hello world hello world hello world hello world hello world  hello world hello world hello world hello world hello world hello world  hello world hello world hello
	Primaryseed string `json:"primaryseed,omitempty"`
}

// Validate validates this get wallet seeds o k body
func (o *GetWalletSeedsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get wallet seeds o k body based on context it is used
func (o *GetWalletSeedsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWalletSeedsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWalletSeedsOKBody) UnmarshalBinary(b []byte) error {
	var res GetWalletSeedsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
