// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostWalletSweepSeedParams creates a new PostWalletSweepSeedParams object
// with the default values initialized.
func NewPostWalletSweepSeedParams() *PostWalletSweepSeedParams {
	var ()
	return &PostWalletSweepSeedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostWalletSweepSeedParamsWithTimeout creates a new PostWalletSweepSeedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostWalletSweepSeedParamsWithTimeout(timeout time.Duration) *PostWalletSweepSeedParams {
	var ()
	return &PostWalletSweepSeedParams{

		timeout: timeout,
	}
}

// NewPostWalletSweepSeedParamsWithContext creates a new PostWalletSweepSeedParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostWalletSweepSeedParamsWithContext(ctx context.Context) *PostWalletSweepSeedParams {
	var ()
	return &PostWalletSweepSeedParams{

		Context: ctx,
	}
}

// NewPostWalletSweepSeedParamsWithHTTPClient creates a new PostWalletSweepSeedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostWalletSweepSeedParamsWithHTTPClient(client *http.Client) *PostWalletSweepSeedParams {
	var ()
	return &PostWalletSweepSeedParams{
		HTTPClient: client,
	}
}

/*PostWalletSweepSeedParams contains all the parameters to send to the API endpoint
for the post wallet sweep seed operation typically these are written to a http.Request
*/
type PostWalletSweepSeedParams struct {

	/*Dictionary
	  Name of the dictionary that should be used when decoding the seed. 'english' is the most common choice when picking a dictionary.

	*/
	Dictionary *string
	/*Seed
	  Dictionary-encoded phrase that corresponds to the seed being added to the wallet.

	*/
	Seed *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) WithTimeout(timeout time.Duration) *PostWalletSweepSeedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) WithContext(ctx context.Context) *PostWalletSweepSeedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) WithHTTPClient(client *http.Client) *PostWalletSweepSeedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDictionary adds the dictionary to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) WithDictionary(dictionary *string) *PostWalletSweepSeedParams {
	o.SetDictionary(dictionary)
	return o
}

// SetDictionary adds the dictionary to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) SetDictionary(dictionary *string) {
	o.Dictionary = dictionary
}

// WithSeed adds the seed to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) WithSeed(seed *string) *PostWalletSweepSeedParams {
	o.SetSeed(seed)
	return o
}

// SetSeed adds the seed to the post wallet sweep seed params
func (o *PostWalletSweepSeedParams) SetSeed(seed *string) {
	o.Seed = seed
}

// WriteToRequest writes these params to a swagger request
func (o *PostWalletSweepSeedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dictionary != nil {

		// query param dictionary
		var qrDictionary string
		if o.Dictionary != nil {
			qrDictionary = *o.Dictionary
		}
		qDictionary := qrDictionary
		if qDictionary != "" {
			if err := r.SetQueryParam("dictionary", qDictionary); err != nil {
				return err
			}
		}

	}

	if o.Seed != nil {

		// query param seed
		var qrSeed string
		if o.Seed != nil {
			qrSeed = *o.Seed
		}
		qSeed := qrSeed
		if qSeed != "" {
			if err := r.SetQueryParam("seed", qSeed); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
