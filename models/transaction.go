// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Transaction transaction
// swagger:model Transaction
type Transaction struct {

	// Block height at which the transaction was confirmed. If the transaction is unconfirmed the height will be the max value of an unsigned 64-bit integer.
	Confirmationheight int64 `json:"confirmationheight,omitempty"`

	// Time, in unix time, at which a transaction was confirmed. If the transaction is unconfirmed the timestamp will be the max value of an unsigned 64-bit integer.
	Confirmationtimestamp int64 `json:"confirmationtimestamp,omitempty"`

	// Array of processed inputs detailing the inputs to the transaction.
	Inputs []*TransactionInputsItems0 `json:"inputs"`

	// Array of processed outputs detailing the outputs of the transaction. Outputs related to file contracts are excluded.
	Outputs []*TransactionOutputsItems0 `json:"outputs"`

	// Raw transaction. The rest of the fields in the resposne are determined from this raw transaction. It is left undocumented here as the processed transaction (the rest of the fields in this object) are usually what is desired.
	Transaction interface{} `json:"transaction,omitempty"`

	// ID of the transaction from which the wallet transaction was derived.
	Transactionid string `json:"transactionid,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Transaction) validateOutputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Outputs); i++ {
		if swag.IsZero(m.Outputs[i]) { // not required
			continue
		}

		if m.Outputs[i] != nil {
			if err := m.Outputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TransactionInputsItems0 transaction inputs items0
// swagger:model TransactionInputsItems0
type TransactionInputsItems0 struct {

	// Type of fund represented by the input. Possible values are 'siacoin input' and 'siafund input'.
	Fundtype string `json:"fundtype,omitempty"`

	// The id of the output being spent.
	Parentid string `json:"parentid,omitempty"`

	// Address that is affected. For inputs (outgoing money), the related address is usually not important because the wallet arbitrarily selects which addresses will fund a transaction.
	Relatedaddress string `json:"relatedaddress,omitempty"`

	// Amount of funds that have been moved in the input.
	Value string `json:"value,omitempty"`

	// true if the address is owned by the wallet.
	Walletaddress bool `json:"walletaddress,omitempty"`
}

// Validate validates this transaction inputs items0
func (m *TransactionInputsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransactionInputsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionInputsItems0) UnmarshalBinary(b []byte) error {
	var res TransactionInputsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TransactionOutputsItems0 transaction outputs items0
// swagger:model TransactionOutputsItems0
type TransactionOutputsItems0 struct {

	// Type of fund is represented by the output. Possible values are 'siacoin output', 'siafund output', 'claim output', and 'miner payout'. Siacoin outputs and claim outputs both relate to siacoins. Siafund outputs relate to siafunds. Miner payouts point to siacoins that have been spent on a miner payout. Because the destination of the miner payout is determined by the block and not the transaction, the data 'maturityheight', 'walletaddress', and 'relatedaddress' are left blank.
	Fundtype string `json:"fundtype,omitempty"`

	// The id of the output that was created.
	ID string `json:"id,omitempty"`

	// Block height the output becomes available to be spent. Siacoin outputs and siafund outputs mature immediately - their maturity height will always be the confirmation height of the transaction. Claim outputs cannot be spent until they have had 144 confirmations, thus the maturity height of a claim output will always be 144 larger than the confirmation height of the transaction.
	Maturityheight int64 `json:"maturityheight,omitempty"`

	// Address that is affected. For outputs (incoming money), the related address field can be used to determine who has sent money to the wallet.
	Relatedaddress string `json:"relatedaddress,omitempty"`

	// Amount of funds that have been moved in the output.
	Value string `json:"value,omitempty"`

	// true if the address is owned by the wallet.
	Walletaddress bool `json:"walletaddress,omitempty"`
}

// Validate validates this transaction outputs items0
func (m *TransactionOutputsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransactionOutputsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionOutputsItems0) UnmarshalBinary(b []byte) error {
	var res TransactionOutputsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
