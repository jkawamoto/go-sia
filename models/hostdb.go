// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Hostdb hostdb
// swagger:model Hostdb
type Hostdb struct {

	// hosts
	Hosts []*HostdbHostsItems0 `json:"hosts"`
}

// Validate validates this hostdb
func (m *Hostdb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hostdb) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Hostdb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Hostdb) UnmarshalBinary(b []byte) error {
	var res Hostdb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HostdbHostsItems0 hostdb hosts items0
// swagger:model HostdbHostsItems0
type HostdbHostsItems0 struct {

	// true if the host is accepting new contracts.
	Acceptingcontracts bool `json:"acceptingcontracts,omitempty"`

	// Maximum number of bytes that the host will allow to be requested by a single download request.
	Maxdownloadbatchsize int64 `json:"maxdownloadbatchsize,omitempty"`

	// Maximum duration in blocks that a host will allow for a file contract.
	// The host commits to keeping files for the full duration under the
	// threat of facing a large penalty for losing or dropping data before
	// the duration is complete. The storage proof window of an incoming file
	// contract must end before the current height + maxduration.
	// There is a block approximately every 10 minutes.
	// e.g. 1 day = 144 blocks
	//
	Maxduration int64 `json:"maxduration,omitempty"`

	// Maximum size in bytes of a single batch of file contract
	// revisions. Larger batch sizes allow for higher throughput as there is
	// significant communication overhead associated with performing a batch
	// upload.
	//
	Maxrevisebatchsize int64 `json:"maxrevisebatchsize,omitempty"`

	// Remote address of the host. It can be an IPv4, IPv6, or hostname, along with the port. IPv6 addresses are enclosed in square brackets.
	Netaddress string `json:"netaddress,omitempty"`

	// publickey
	Publickey *HostdbHostsItems0Publickey `json:"publickey,omitempty"`

	// Unused storage capacity the host claims it has, in bytes.
	Remainingstorage int64 `json:"remainingstorage,omitempty"`

	// Smallest amount of data in bytes that can be uploaded or downloaded to or from the host.
	Sectorsize int64 `json:"sectorsize,omitempty"`

	// Total amount of storage capacity the host claims it has, in bytes.
	Totalstorage int64 `json:"totalstorage,omitempty"`

	// Address at which the host can be paid when forming file contracts.
	Unlockhash string `json:"unlockhash,omitempty"`

	// A storage proof window is the number of blocks that the host has to
	// get a storage proof onto the blockchain. The window size is the
	// minimum size of window that the host will accept in a file contract.
	//
	Windowsize int64 `json:"windowsize,omitempty"`
}

// Validate validates this hostdb hosts items0
func (m *HostdbHostsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublickey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostdbHostsItems0) validatePublickey(formats strfmt.Registry) error {

	if swag.IsZero(m.Publickey) { // not required
		return nil
	}

	if m.Publickey != nil {
		if err := m.Publickey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publickey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostdbHostsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostdbHostsItems0) UnmarshalBinary(b []byte) error {
	var res HostdbHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HostdbHostsItems0Publickey Public key used to identify and verify hosts.
// swagger:model HostdbHostsItems0Publickey
type HostdbHostsItems0Publickey struct {

	// Algorithm used for signing and verification. Typically "ed25519".
	Algorithm string `json:"algorithm,omitempty"`

	// Key used to verify signed host messages.
	Key string `json:"key,omitempty"`
}

// Validate validates this hostdb hosts items0 publickey
func (m *HostdbHostsItems0Publickey) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostdbHostsItems0Publickey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostdbHostsItems0Publickey) UnmarshalBinary(b []byte) error {
	var res HostdbHostsItems0Publickey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
